"""Test reaction equations."""
import numpy as np

# Test values come from pychegp code

def test_arrhenius():
    from freckll.reactions.reactions import arrhenius_constant
    temperature = np.array([1846.3, 1827.5, 1764.8, 1651.1, 1398.2, 1266.1, 1349.5, 1515. ,
       1676.1, 1834.9, 1986. , 2176.5, 2412. ])
    k0 = arrhenius_constant(a=1.977e+18, n=-7.5, er=22900.0, temperature=temperature)

    expected = np.array([2.58288430e-12, 2.45486592e-12, 2.04360183e-12, 1.37797390e-12,
       3.90188815e-13, 1.48728911e-13, 2.81876773e-13, 7.55663882e-13,
       1.51403300e-12, 2.50502748e-12, 3.57632056e-12, 4.93623891e-12,
       6.38116678e-12])
    
    np.testing.assert_allclose(k0, expected)

def test_collision_reaction():
    from freckll.reactions.common import collision_rate_limit
    from freckll.species import SpeciesFormula
    reactats = SpeciesFormula("CH3")
    k0 = np.array([2.30619237e-11, 1.31264193e-11, 6.88277557e-12, 3.80031234e-12,
       3.02367037e-12, 1.43511975e-12, 3.08418410e-13, 5.30003132e-14,
       9.04939281e-15, 1.53248255e-15, 2.40874692e-16, 2.34637676e-17,
       9.02245617e-19])
    
    ki=np.array([5.997e-11, 5.997e-11, 5.997e-11, 5.997e-11, 5.997e-11, 5.997e-11,
       5.997e-11, 5.997e-11, 5.997e-11, 5.997e-11, 5.997e-11, 5.997e-11,
       5.997e-11])
    
    m = np.array([3.57581283e+20, 7.58837183e+19, 1.61989375e+19, 3.28066710e+18,
       5.42973748e+17, 7.62225561e+16, 1.63528555e+16, 4.77902996e+15,
       1.37736280e+15, 3.84935743e+14, 9.48470847e+13, 1.58797461e+13,
       1.13167872e+12])

    temperature = np.array([1846.3, 1827.5, 1764.8, 1651.1, 1398.2, 1266.1, 1349.5, 1515. ,
       1676.1, 1834.9, 1986. , 2176.5, 2412. ])
    
    result = collision_rate_limit(
        k_rate=k0, k_inf=ki, reactants=[reactats, reactats],m_concentration=m, temperature=temperature
    )

    expected = np.array([2.30619237e-11, 1.31264193e-11, 6.88277557e-12, 3.80031234e-12,
       3.02367037e-12, 1.43511975e-12, 3.08418410e-13, 5.30003132e-14,
       9.04939281e-15, 1.53248255e-15, 2.40874692e-16, 2.34637676e-17,
       9.02245617e-19])
    
    np.testing.assert_allclose(result, expected)



def test_collision_reaction_single_species():
    from freckll.reactions.common import collision_rate_limit
    from freckll.species import SpeciesFormula
    reactats = SpeciesFormula("C2H3")
    k0 = np.array([2.58288430e-12, 2.45486592e-12, 2.04360183e-12, 1.37797390e-12,
       3.90188815e-13, 1.48728911e-13, 2.81876773e-13, 7.55663882e-13,
       1.51403300e-12, 2.50502748e-12, 3.57632056e-12, 4.93623891e-12,
       6.38116678e-12])
    
    ki=np.array([3.92819741e+09, 3.51376545e+09, 2.38137335e+09, 1.09076510e+09,
       1.21823173e+08, 2.73684009e+07, 7.26834679e+07, 3.67200174e+08,
       1.30688200e+09, 3.67240295e+09, 8.41944528e+09, 2.03364146e+10,
       4.99015840e+10])
    m = np.array([3.57581239e+20, 7.58837113e+19, 1.61989364e+19, 3.28066698e+18,
       5.42973739e+17, 7.62225555e+16, 1.63528555e+16, 4.77902996e+15,
       1.37736280e+15, 3.84935743e+14, 9.48470847e+13, 1.58797461e+13,
       1.13167872e+12])

    temperature = np.array([1846.3, 1827.5, 1764.8, 1651.1, 1398.2, 1266.1, 1349.5, 1515. ,
       1676.1, 1834.9, 1986. , 2176.5, 2412. ])
    
    result = collision_rate_limit(
        k_rate=k0, k_inf=ki, reactants=[reactats],m_concentration=m, temperature=1846.3
    )

    expected = np.array([2.58288430e-12, 2.45486592e-12, 2.04360183e-12, 1.37797390e-12,
       3.90188815e-13, 1.48728911e-13, 2.81876773e-13, 7.55663882e-13,
       1.51403300e-12, 2.50502748e-12, 3.57632056e-12, 4.93623891e-12,
       6.38116678e-12])
    
    np.testing.assert_allclose(result, expected)



def test_troe_falloff():
    from freckll.reactions.falloff import troe_falloff_term
    k0 = np.array([2.58288430e-12, 2.45486592e-12, 2.04360183e-12, 1.37797390e-12,
       3.90188815e-13, 1.48728911e-13, 2.81876773e-13, 7.55663882e-13,
       1.51403300e-12, 2.50502748e-12, 3.57632056e-12, 4.93623891e-12,
       6.38116678e-12])
    ki=np.array([3.92819741e+09, 3.51376545e+09, 2.38137335e+09, 1.09076510e+09,
       1.21823173e+08, 2.73684009e+07, 7.26834679e+07, 3.67200174e+08,
       1.30688200e+09, 3.67240295e+09, 8.41944528e+09, 2.03364146e+10,
       4.99015840e+10])
    
    m = np.array([3.57581239e+20, 7.58837113e+19, 1.61989364e+19, 3.28066698e+18,
       5.42973739e+17, 7.62225555e+16, 1.63528555e+16, 4.77902996e+15,
       1.37736280e+15, 3.84935743e+14, 9.48470847e+13, 1.58797461e+13,
       1.13167872e+12])

    temperature = np.array([1846.3, 1827.5, 1764.8, 1651.1, 1398.2, 1266.1, 1349.5, 1515. ,
       1676.1, 1834.9, 1986. , 2176.5, 2412. ])

    result = troe_falloff_term(k0=k0, kinf=ki, m=m, temperature=temperature, a_troe=0.35, t3=1, t1=100000000.0, t2=1e18)

    expected = np.array([-0.36310058, -0.25167942, -0.18359401, -0.14316149, -0.12235864,
       -0.09769283, -0.07667554, -0.06302549, -0.05375279, -0.047021  ,
       -0.04174271, -0.03677556, -0.03179401])


    np.testing.assert_allclose(result, 10**expected)


def test_inverse_reaction():
    from freckll.reactions.common import invert_reaction

    thermo_inv_react = np.array([[[12.62082296, 43.93447316],
        [12.60684593, 43.79139722],
        [12.56089401, 43.30613095],
        [12.48145494, 42.39289976],
        [12.34139365, 40.19064007],
        [12.30675329, 38.93324418],
        [12.32433885, 39.7363809 ],
        [12.39746399, 41.23895131],
        [12.49836647, 42.59750807],
        [12.61233827, 43.84784581],
        [12.72630024, 44.96428713],
        [12.87055159, 46.28073248],
        [13.04258597, 47.78383352]],

       [[ 3.11055054, 22.32493579],
        [ 3.10090597, 22.28350494],
        [ 3.06789551, 22.14281277],
        [ 3.00438637, 21.87710568],
        [ 2.84180557, 21.22845151],
        [ 2.74109214, 20.85067572],
        [ 2.80619631, 21.09272593],
        [ 2.92108366, 21.53891856],
        [ 3.01878527, 21.93676254],
        [ 3.10471573, 22.29985338],
        [ 3.17890332, 22.62266544],
        [ 3.26395624, 23.0027927 ],
        [ 3.35857565, 23.43761169]]]).transpose((0,2,1))
    
    thermo_inv_prod = np.array([[[ 6.51067764, 50.1485245 ],
        [ 6.38599466, 49.95784399],
        [ 5.95543435, 49.31183081],
        [ 5.11132287, 48.09905319],
        [ 2.86824424, 45.18989141],
        [ 1.43038391, 43.53807948],
        [ 2.36352765, 44.59240902],
        [ 3.97553778, 46.57204051],
        [ 5.30444395, 48.37043994],
        [ 6.4353076 , 50.03306286],
        [ 7.37918341, 51.52379937],
        [ 8.42035149, 53.28897015],
        [ 9.52274275, 55.31367553]]]).transpose((0,2,1))
    
    k0 = np.array([4.07782082e-15, 3.37614075e-15, 1.74697157e-15, 4.65558639e-16,
       1.13661745e-17, 9.06386210e-19, 4.73955559e-18, 7.36490488e-17,
       6.32317022e-16, 3.63831820e-15, 1.48313288e-14, 6.60440701e-14,
       3.02056015e-13])
    
    kinf = np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])


    temperature = np.array([1846.3, 1827.5, 1764.8, 1651.1, 1398.2, 1266.1, 1349.5, 1515. ,
         1676.1, 1834.9, 1986. , 2176.5, 2412. ])
    
    result_k0, result_kinv, result_keq = invert_reaction(thermo_inv_reactants=thermo_inv_react, thermo_inv_products=thermo_inv_prod, k0=k0, k_inf=kinf, temperature=temperature)

    expected_k0 = np.array([1.04406122e-36, 9.40768311e-37, 6.54897687e-37, 3.18240163e-37,
       4.32130554e-38, 1.12890471e-38, 2.71274895e-38, 1.17503430e-37,
       3.75890553e-37, 9.80377048e-37, 2.13889988e-36, 4.96395100e-36,
       1.18969053e-35])
    
    expected_kinv = np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])

    expected_keq = np.array([3.90572960e+21, 3.58870586e+21, 2.66754884e+21, 1.46291604e+21,
       2.63026403e+20, 8.02889920e+19, 1.74714125e+20, 6.26782117e+20,
       1.68218386e+21, 3.71114175e+21, 6.93409212e+21, 1.33047385e+22,
       2.53894611e+22])
    

    np.testing.assert_allclose(result_k0, expected_k0)
    np.testing.assert_allclose(result_kinv, expected_kinv)
    np.testing.assert_allclose(result_keq, expected_keq)